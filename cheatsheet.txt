## Leaderf
查找buffer                                                      | <leader>fb
查找tag                                                         | <leader>ft
查找引用                                                        | <leader>fr
查找定义                                                        | <leader>fd
再次调用刚才的命令                                              | <leader>fo
跳转到下一个tag                                                 | <leader>fn
跳转到上一个tag                                                 | <leader>fp
显示出当前文件的函数列表                                        | <F2>
查找文件                                                        | <c-p>
使用rg查找当前光标下的单词                                      | <c-f>
在当前文件中查找当前光标下的单词                                | <c-b>
再调用一次rg查找                                                | go

## coc
查看文档                                                        | K
查看声明                                                        | gd <Plug>(coc-definition)
查看类型定义                                                    | gy <Plug>(coc-type-definition)
查看引用                                                        | gr <Plug>(coc-references)
查看定义                                                        | ge <Plug>(coc-declaration)
快速修改                                                        | <leader>qf  <Plug>(coc-fix-current)
代码格式化                                                      | <leader>f  <Plug>(coc-format-selected)

## 注释
代码注释切换                                                    | <leader>c<space>
函数注释                                                        | :Dox
Author注释                                                      | :DoxAuthor

## 窗口
增加当前窗口的行高，前面可以加数字                              | CTRL-W +
减少当前窗口的行高，前面可以加数字                              | CTRL-W -
减少当前窗口的列宽，前面可以加数字                              | CTRL-W <
增加当前窗口的列宽，前面可以加数字                              | CTRL-W >
让所有窗口宽高相同                                              | CTRL-W =
将当前窗口移动到最左边                                          | CTRL-W H
将当前窗口移动到最下边                                          | CTRL-W J
将当前窗口移动到最上边                                          | CTRL-W K
将当前窗口移动到最右边                                          | CTRL-W L
交换窗口                                                        | CTRL-W x

## 折叠
创建代码折叠                                                    | zf
切换折叠                                                        | za
打开一层代码                                                    | zo
删除光标下折叠                                                  | zd

## surround
删除括号                                                        | ds"						"Hello world!" => Hello world!
替换括号                                                        | cs"(						"Hello world!" => (Hello world!)
替换括号，括号内文本做新一行                                    | cS"{						"Hello world!" => {\n Hello world! \n}
添加括号                                                        | ysiw"                     Hello world! => "Hello" world!
整行括起来                                                      | yss"                      Hello world! => "Hello world!"
选中的括起来                                                    | S"
选中的括起来，括号内文本做新一行                                | gS"						Hello world! => Hello {\n world\n }!

## nvim-tree
刷新目录                                                        | R

## goto-preview
预览定义                                                        | gpd
预览实现                                                        | gpi
关闭预览                                                        | gP

## chm-custom
BufOnly                                                         | BufOnly    <C-2>
CloseCurrentBuf                                                 | <C-3>

## 正则表达式(regex)
[abc]															| 匹配[...]中的所有字符
[^abc]															| 匹配除了[...]中的所有字符
[a-z]															| [a-z]表示一个区间，匹配所有小写字母,[A-Z]匹配所有大写字母
.																| 匹配除了换行符(\n,\r)之外的任何单个字符
[\s\S]															| 匹配所有。\s是匹配所有空白字符；\S非空白符，不包括换行。
[\w]															| 匹配字母、数字、下划线。等价[A-Za-z0-9]
\cx																| 匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符。
\f																| 匹配一个换页符。等价于 \x0c 和 \cL.
\n																| 匹配一个换行符。等价于 \x0a 和 \cJ。
\r																| 匹配一个回车符。等价于 \x0d 和 \cM。
\s																| 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。注意 Unicode 正则表达式会匹配全角空格符。
\S																| 匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。
\t																| 匹配一个制表符。等价于 \x09 和 \cI。
\v																| 匹配一个垂直制表符。等价于 \x0b 和 \cK。
$																| 匹配输入字符串的结尾位置。
()																| 标记一个子表达式的开始和结束位置。表示捕获分组，()会把每个分组里的匹配值保存起来
*																| 匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 \*。
+																| 匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 \+。
[																| 标记一个中括号表达式的开始。要匹配 [，请使用 \[。
?																| 匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 \?。
\																| 将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。
^																| 匹配输入字符串的开始位置，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。要匹配 ^ 字符本身，请使用 \^。
{																| 标记限定符表达式的开始。要匹配 {，请使用 \{。
|																| 指明两项之间的一个选择。要匹配 |，请使用 \|。
{n}																| n 是一个非负整数。匹配确定的 n 次。例如，'o{2}' 不能匹配 "Bob" 中的 'o'，但是能匹配 "food" 中的两个 o。
{n,}															| n 是一个非负整数。至少匹配n 次。'o{1,}' 等价于 'o+'。'o{0,}' 则等价于 'o*'。
{n,m}															| m 和 n 均为非负整数，其中n <= m。最少匹配 n 次且最多匹配 m 次。请注意在逗号和两个数之间不能有空格。
